// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bdo.DatabaseLibrary1.Migrations
{
    [DbContext(typeof(BdoDbContext))]
    [Migration("20230103114039_Profiling")]
    partial class Profiling
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("BdoBanks");
                });

            modelBuilder.Entity("BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("AccountReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccountType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("BankId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("BankCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("CardType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.ToTable("BdoBankCards");
                });

            modelBuilder.Entity("BankStatement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Address2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Address3")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Address4")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Address5")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Address6")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal?>("BalanceClosing")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<decimal?>("BalanceOpening")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<decimal>("FeesCharged")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<decimal>("FundsReceived")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<decimal>("FundsUsed")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SourceFileName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SourcePageCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StatementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatementDateText")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("StatementFrequency")
                        .HasColumnType("int");

                    b.Property<int?>("StatementNumber")
                        .HasColumnType("int");

                    b.Property<string>("StatementPeriod")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("VatNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("BdoBankStatements");
                });

            modelBuilder.Entity("BankStatementPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BankStatementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StatementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BankStatementId");

                    b.ToTable("BdoBankPages");
                });

            modelBuilder.Entity("BankTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<decimal?>("Credit")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Debit")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageNumber")
                        .HasColumnType("int");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.Property<int>("StatementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BdoBankTransactions");
                });

            modelBuilder.Entity("Consent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConsentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FolderName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Number")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("BdoConsents");
                });

            modelBuilder.Entity("DocDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DocumentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastWriteTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("OwnerFolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerFolderId");

                    b.HasIndex("TypeId");

                    b.ToTable("DocDocument");
                });

            modelBuilder.Entity("DocDocumentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("DocDocumentType");
                });

            modelBuilder.Entity("DocField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocDocumentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("DocDocumentTypeId");

                    b.ToTable("DocField");
                });

            modelBuilder.Entity("DocFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIdentified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("OcrDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OcrEngine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerFolderId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OwnerFolderId");

                    b.ToTable("DocFiles");
                });

            modelBuilder.Entity("DocFolder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("OwnerProjectId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerProjectId");

                    b.ToTable("DocFolders");
                });

            modelBuilder.Entity("DocImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Checksum")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("OwnerPageId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerPageId");

                    b.ToTable("DocImages");
                });

            modelBuilder.Entity("DocPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ImageCount")
                        .HasColumnType("int");

                    b.Property<bool?>("IsBlank")
                        .HasColumnType("bit");

                    b.Property<bool>("IsError")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("OwnerFileId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PageIndex")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ProfileVersion")
                        .HasColumnType("real");

                    b.Property<int?>("SymbolCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("SymbolData")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocDocumentId");

                    b.HasIndex("OwnerFileId");

                    b.ToTable("DocPages");
                });

            modelBuilder.Entity("DocProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DocumentsCount")
                        .HasColumnType("int");

                    b.Property<int?>("FoldersCount")
                        .HasColumnType("int");

                    b.Property<int?>("ImagesCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsLoadFoldersChecked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("OwnerRootId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PagesCount")
                        .HasColumnType("int");

                    b.Property<string>("RootFolderPath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerRootId");

                    b.ToTable("DocProjects");
                });

            modelBuilder.Entity("DocRoot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("SelectedProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SelectedProjectId");

                    b.ToTable("Root");
                });

            modelBuilder.Entity("DocValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("OwnerDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("SourceHeight")
                        .HasColumnType("float");

                    b.Property<int?>("SourceIndex")
                        .HasColumnType("int");

                    b.Property<double?>("SourceLeft")
                        .HasColumnType("float");

                    b.Property<double?>("SourceTop")
                        .HasColumnType("float");

                    b.Property<double?>("SourceWidth")
                        .HasColumnType("float");

                    b.Property<string>("Value")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerDocumentId");

                    b.ToTable("DocValue");
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConsentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateSource")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FolderName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameSource")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Number")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumberSource")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("BdoEmployees");
                });

            modelBuilder.Entity("SysMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RootMessages");
                });

            modelBuilder.Entity("BankAccount", b =>
                {
                    b.HasOne("Bank", "Bank")
                        .WithMany("Accounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employee", "Employee")
                        .WithMany("Accounts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BankCard", b =>
                {
                    b.HasOne("BankAccount", null)
                        .WithMany("Cards")
                        .HasForeignKey("BankAccountId");
                });

            modelBuilder.Entity("BankStatement", b =>
                {
                    b.HasOne("BankAccount", "Account")
                        .WithMany("Statements")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BankStatementPage", b =>
                {
                    b.HasOne("BankStatement", null)
                        .WithMany("SourcePages")
                        .HasForeignKey("BankStatementId");
                });

            modelBuilder.Entity("Consent", b =>
                {
                    b.HasOne("Employee", "Employee")
                        .WithMany("Consents")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DocDocument", b =>
                {
                    b.HasOne("DocFolder", "OwnerFolder")
                        .WithMany("Documents")
                        .HasForeignKey("OwnerFolderId");

                    b.HasOne("DocDocumentType", "Type")
                        .WithMany("Documents")
                        .HasForeignKey("TypeId");

                    b.Navigation("OwnerFolder");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DocField", b =>
                {
                    b.HasOne("DocDocumentType", null)
                        .WithMany("Fields")
                        .HasForeignKey("DocDocumentTypeId");
                });

            modelBuilder.Entity("DocFile", b =>
                {
                    b.HasOne("DocFolder", "OwnerFolder")
                        .WithMany("Files")
                        .HasForeignKey("OwnerFolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerFolder");
                });

            modelBuilder.Entity("DocFolder", b =>
                {
                    b.HasOne("DocProject", "OwnerProject")
                        .WithMany("Folders")
                        .HasForeignKey("OwnerProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerProject");
                });

            modelBuilder.Entity("DocImage", b =>
                {
                    b.HasOne("DocPage", "OwnerPage")
                        .WithMany("Images")
                        .HasForeignKey("OwnerPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerPage");
                });

            modelBuilder.Entity("DocPage", b =>
                {
                    b.HasOne("DocDocument", null)
                        .WithMany("Pages")
                        .HasForeignKey("DocDocumentId");

                    b.HasOne("DocFile", "OwnerFile")
                        .WithMany("Pages")
                        .HasForeignKey("OwnerFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerFile");
                });

            modelBuilder.Entity("DocProject", b =>
                {
                    b.HasOne("DocRoot", "OwnerRoot")
                        .WithMany("Projects")
                        .HasForeignKey("OwnerRootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerRoot");
                });

            modelBuilder.Entity("DocRoot", b =>
                {
                    b.HasOne("DocProject", "SelectedProject")
                        .WithMany()
                        .HasForeignKey("SelectedProjectId");

                    b.Navigation("SelectedProject");
                });

            modelBuilder.Entity("DocValue", b =>
                {
                    b.HasOne("DocDocument", "OwnerDocument")
                        .WithMany("Values")
                        .HasForeignKey("OwnerDocumentId");

                    b.Navigation("OwnerDocument");
                });

            modelBuilder.Entity("Bank", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BankAccount", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Statements");
                });

            modelBuilder.Entity("BankStatement", b =>
                {
                    b.Navigation("SourcePages");
                });

            modelBuilder.Entity("DocDocument", b =>
                {
                    b.Navigation("Pages");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("DocDocumentType", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("DocFile", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("DocFolder", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("DocPage", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("DocProject", b =>
                {
                    b.Navigation("Folders");
                });

            modelBuilder.Entity("DocRoot", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Consents");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Bdo.DatabaseLibrary1;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bdo.DatabaseLibrary1.Migrations
{
    [DbContext(typeof(BdoDocDbContext))]
    [Migration("20230116135948_SelectedDocProjectId")]
    partial class SelectedDocProjectId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bdo.DatabaseLibrary1.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("BdoBanks");
                });

            modelBuilder.Entity("Bdo.DatabaseLibrary1.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("AccountReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccountType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("BankId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("Bdo.DatabaseLibrary1.BankCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("CardType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.ToTable("BdoBankCards");
                });

            modelBuilder.Entity("Bdo.DatabaseLibrary1.BankStatement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Address2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Address3")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Address4")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Address5")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Address6")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal?>("BalanceClosing")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<decimal?>("BalanceOpening")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<decimal>("FeesCharged")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<decimal>("FundsReceived")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<decimal>("FundsUsed")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SourceFileName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SourcePageCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StatementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatementDateText")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("StatementFrequency")
                        .HasColumnType("int");

                    b.Property<int?>("StatementNumber")
                        .HasColumnType("int");

                    b.Property<string>("StatementPeriod")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("VatNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("BdoBankStatements");
                });

            modelBuilder.Entity("Bdo.DatabaseLibrary1.BankStatementPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BankStatementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StatementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BankStatementId");

                    b.ToTable("BdoBankPages");
                });

            modelBuilder.Entity("Bdo.DatabaseLibrary1.BankTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<decimal?>("Credit")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Debit")
                        .HasColumnType("Decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageNumber")
                        .HasColumnType("int");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.Property<int>("StatementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BdoBankTransactions");
                });

            modelBuilder.Entity("Bdo.DatabaseLibrary1.Consent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConsentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FolderName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Number")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("BdoConsents");
                });

            modelBuilder.Entity("Bdo.DatabaseLibrary1.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConsentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateSource")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FolderName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameSource")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Number")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumberSource")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("BdoEmployees");
                });

            modelBuilder.Entity("Jem.DocDatabaseLibrary1.DocFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIdentified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("OcrDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OcrEngine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerFolderId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SelectedDocPageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerFolderId");

                    b.HasIndex("SelectedDocPageId");

                    b.ToTable("DocFiles");
                });

            modelBuilder.Entity("Jem.DocDatabaseLibrary1.DocFolder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AreAllFilesIdentified")
                        .HasColumnType("bit");

                    b.Property<bool>("AreAnyFileError")
                        .HasColumnType("bit");

                    b.Property<bool>("AreFilesLoaded")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("OwnerProjectId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SelectedDocFileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerProjectId");

                    b.HasIndex("SelectedDocFileId");

                    b.ToTable("DocFolders");
                });

            modelBuilder.Entity("Jem.DocDatabaseLibrary1.DocImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Checksum")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("OwnerPageId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerPageId");

                    b.ToTable("DocImages");
                });

            modelBuilder.Entity("Jem.DocDatabaseLibrary1.DocPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ImageCount")
                        .HasColumnType("int");

                    b.Property<bool?>("IsBlank")
                        .HasColumnType("bit");

                    b.Property<bool>("IsError")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("OwnerFileId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PageIndex")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ProfileVersion")
                        .HasColumnType("real");

                    b.Property<int?>("SymbolCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("SymbolData")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerFileId");

                    b.ToTable("DocPages");
                });

            modelBuilder.Entity("Jem.DocDatabaseLibrary1.DocProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DocumentsCount")
                        .HasColumnType("int");

                    b.Property<int?>("FoldersCount")
                        .HasColumnType("int");

                    b.Property<int?>("ImagesCount")
                        .HasColumnType("int");

                    b.Property<string>("ImportExcludeWildcards")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ImportFilesInSubFolders")
                        .HasColumnType("bit");

                    b.Property<string>("ImportFolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImportProgressPercentage")
                        .HasColumnType("int");

                    b.Property<int>("ImportStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("OwnerSolutionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PagesCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("SelectedDocFolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkingFolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerSolutionId");

                    b.HasIndex("SelectedDocFolderId");

                    b.ToTable("DocProjects");
                });

            modelBuilder.Entity("Jem.DocDatabaseLibrary1.DocSolution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("SelectedDocProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SelectedDocProjectId");

                    b.ToTable("DocSolutions");
                });

            modelBuilder.Entity("Jem.DocDatabaseLibrary1.SysMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SysMessages");
                });

            modelBuilder.Entity("Jem.DocDatabaseLibrary1.SysUserSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DarkMode")
                        .HasColumnType("bit");

                    b.Property<string>("ImportExcludeExtensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ImportFilesInSubFolders")
                        .HasColumnType("bit");

                    b.Property<string>("ImportFolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ImportFoldersInParallel")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("ResetPanZoomOnFileSelect")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SelectedDocProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SelectedDocSolutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SelectedProBagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("SnapBottom")
                        .HasColumnType("bit");

                    b.Property<bool>("SnapLeft")
                        .HasColumnType("bit");

                    b.Property<bool>("SnapRight")
                        .HasColumnType("bit");

                    b.Property<bool>("SnapTop")
                        .HasColumnType("bit");

                    b.Property<string>("WorkingFolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SelectedDocSolutionId");

                    b.ToTable("SysUserSettings");
                });

            modelBuilder.Entity("Bdo.DatabaseLibrary1.BankAccount", b =>
                {
                    b.HasOne("Bdo.DatabaseLibrary1.Bank", "Bank")
                        .WithMany("Accounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bdo.DatabaseLibrary1.Employee", "Employee")
                        .WithMany("Accounts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Bdo.DatabaseLibrary1.BankCard", b =>
                {
                    b.HasOne("Bdo.DatabaseLibrary1.BankAccount", null)
                        .WithMany("Cards")
                        .HasForeignKey("BankAccountId");
                });

            modelBuilder.Entity("Bdo.DatabaseLibrary1.BankStatement", b =>
                {
                    b.HasOne("Bdo.DatabaseLibrary1.BankAccount", "Account")
                        .WithMany("Statements")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Bdo.DatabaseLibrary1.BankStatementPage", b =>
                {
                    b.HasOne("Bdo.DatabaseLibrary1.BankStatement", null)
                        .WithMany("SourcePages")
                        .HasForeignKey("BankStatementId");
                });

            modelBuilder.Entity("Bdo.DatabaseLibrary1.Consent", b =>
                {
                    b.HasOne("Bdo.DatabaseLibrary1.Employee", "Employee")
                        .WithMany("Consents")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Jem.DocDatabaseLibrary1.DocFile", b =>
                {
                    b.HasOne("Jem.DocDatabaseLibrary1.DocFolder", "OwnerFolder")
                        .WithMany("Files")
                        .HasForeignKey("OwnerFolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jem.DocDatabaseLibrary1.DocPage", "SelectedDocPage")
                        .WithMany()
                        .HasForeignKey("SelectedDocPageId");

                    b.Navigation("OwnerFolder");

                    b.Navigation("SelectedDocPage");
                });

            modelBuilder.Entity("Jem.DocDatabaseLibrary1.DocFolder", b =>
                {
                    b.HasOne("Jem.DocDatabaseLibrary1.DocProject", "OwnerProject")
                        .WithMany("Folders")
                        .HasForeignKey("OwnerProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jem.DocDatabaseLibrary1.DocFile", "SelectedDocFile")
                        .WithMany()
                        .HasForeignKey("SelectedDocFileId");

                    b.Navigation("OwnerProject");

                    b.Navigation("SelectedDocFile");
                });

            modelBuilder.Entity("Jem.DocDatabaseLibrary1.DocImage", b =>
                {
                    b.HasOne("Jem.DocDatabaseLibrary1.DocPage", "OwnerPage")
                        .WithMany("Images")
                        .HasForeignKey("OwnerPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerPage");
                });

            modelBuilder.Entity("Jem.DocDatabaseLibrary1.DocPage", b =>
                {
                    b.HasOne("Jem.DocDatabaseLibrary1.DocFile", "OwnerFile")
                        .WithMany("Pages")
                        .HasForeignKey("OwnerFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerFile");
                });

            modelBuilder.Entity("Jem.DocDatabaseLibrary1.DocProject", b =>
                {
                    b.HasOne("Jem.DocDatabaseLibrary1.DocSolution", "OwnerSolution")
                        .WithMany("Projects")
                        .HasForeignKey("OwnerSolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jem.DocDatabaseLibrary1.DocFolder", "SelectedDocFolder")
                        .WithMany()
                        .HasForeignKey("SelectedDocFolderId");

                    b.Navigation("OwnerSolution");

                    b.Navigation("SelectedDocFolder");
                });

            modelBuilder.Entity("Jem.DocDatabaseLibrary1.DocSolution", b =>
                {
                    b.HasOne("Jem.DocDatabaseLibrary1.DocProject", "SelectedDocProject")
                        .WithMany()
                        .HasForeignKey("SelectedDocProjectId");

                    b.Navigation("SelectedDocProject");
                });

            modelBuilder.Entity("Jem.DocDatabaseLibrary1.SysUserSettings", b =>
                {
                    b.HasOne("Jem.DocDatabaseLibrary1.DocSolution", "SelectedDocSolution")
                        .WithMany()
                        .HasForeignKey("SelectedDocSolutionId");

                    b.Navigation("SelectedDocSolution");
                });

            modelBuilder.Entity("Bdo.DatabaseLibrary1.Bank", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Bdo.DatabaseLibrary1.BankAccount", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Statements");
                });

            modelBuilder.Entity("Bdo.DatabaseLibrary1.BankStatement", b =>
                {
                    b.Navigation("SourcePages");
                });

            modelBuilder.Entity("Bdo.DatabaseLibrary1.Employee", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Consents");
                });

            modelBuilder.Entity("Jem.DocDatabaseLibrary1.DocFile", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("Jem.DocDatabaseLibrary1.DocFolder", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Jem.DocDatabaseLibrary1.DocPage", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Jem.DocDatabaseLibrary1.DocProject", b =>
                {
                    b.Navigation("Folders");
                });

            modelBuilder.Entity("Jem.DocDatabaseLibrary1.DocSolution", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
